apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: clone-vote-app-
spec:
  serviceAccountName: pipeline
  taskSpec:
    params:
      - name: GITEA_USER
        type: string
        description: Gitea admin username
        default: gitea
      - name: GITEA_PASSWORD
        type: string
        description: Gitea admin password
        default: gitea
      - name: GITEA_SERVER_NAMESPACE
        type: string
        description: Namespace where the gitea git server is running, please change if needed
        default: gitea-git-server
      - name: REPO_URL_API
        type: string
        description: The GitHub Repository to use
        default: "https://github.com/openshift/pipelines-vote-api.git"
      - name: REPO_URL_UI
        type: string
        description: The GitHub Repository to use
        default: "https://github.com/openshift/pipelines-vote-ui.git"
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: clone-pipeline-vote-app-to-local-gitea-server
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3

          import os
          import requests
          import json

          gitea_user = "$(params.GITEA_USER)"
          gitea_pass = "$(params.GITEA_PASSWORD)"
          giteaURL = "http://" + gitea_user + ":" + gitea_pass + "@"+ os.popen('oc -n "$(params.GITEA_SERVER_NAMESPACE)" get svc gitea  -o template --template="{{.spec.clusterIP}}"').read() + ":3000"

          # debugging
          # print("Gitea service url is: " + giteaURL )

          # create git repo pipelines-vote-api
          data_repo = '{"clone_addr": "$(params.REPO_URL_API)", "uid": 1, "repo_name": "pipelines-vote-api"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/migrate", headers = headers, data = data_repo)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo pipelines-vote-api")
            repoInfo = json.loads(str(resp.content,"utf8"))
            print("Repository Clone url {0}".format(repoInfo['clone_url']))

          # create git repo pipelines-vote-ui
          data_repo = '{"clone_addr": "$(params.REPO_URL_UI)", "uid": 1, "repo_name": "pipelines-vote-ui"}'
          resp = requests.post(url = giteaURL + "/api/v1/repos/migrate", headers = headers, data = data_repo)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo pipelines-vote-ui")
            repoInfo = json.loads(str(resp.content,"utf8"))
            print("Repository Clone url {0}".format(repoInfo['clone_url']))
